module.exports = {
  "React Component Test": {
    "prefix": "test:component",
    "body": [
      "",
      "'use strict';",
      "",
      "const expect = require('expect');",
      "const sinon = require('sinon');",
      "const React = require('react');",
      "const shallow = require('enzyme').shallow;",
      "",
      "const setup = () => {",
      "	const props = {",
      "	//define props here",
      "	};",
      " return shallow(<Component {...props} />);",
      "};",
      "",
      "describe('<Component />', () => {",
      "",
      "let component",
      "",
      "beforeEach(() => {",
      "	component = setup();",
      "});",
      "",
      "describe('Component Feature', () => {",
      "",
      "	it('should pass', () => {",
      "		expect(true).toBe(true);",
      "	});",
      "",
      "	it('should also pass', done => {",
      "		expect(true).toBe(true);",
      "		done();",
      "	});",
      "",
      "});",
      "",
      "});",
      "",
      "// examples: ",
      "// component.find(DialogActions).childAt(0).simulate('click');",
      "// expect(wrapper.find(DialogActions).childAt(1).childAt(0).text()).toEqual('Cancel');",
      "// expect(component.find(DialogTitle).childAt(0).text()).toEqual('foo');"
    ]
  },
  "Redux Action Test": {
    "prefix": "test:actions",
    "body": [
      "",
      "const expect = require('expect');",
      "const sinon = require('sinon');",
      "import * as actions from './actions';",
      "import * as types from './constants';",
      "import configureMockStore from 'redux-mock-store';",
      "import thunk from 'redux-thunk';",
      "",
      "const middlewares = [thunk];",
      "const mockStore = configureMockStore(middlewares);",
      "",
      "",
      "describe('Component Actions', () => {",
      "	let store;",
      "",
      "	before(() => {",
      "	store = mockStore();",
      "	});",
      "",
      "	after(() => {",
      "",
      "	});",
      "",
      "	beforeEach(() => {",
      "",
      "	});",
      "",
      "	beforeEach(() => {",
      "		store.clearActions();",
      "	});",
      "",
      "	describe('Component Feature', () => {",
      "",
      "		it('should pass', () => {",
      "			expect(true).toBe(true);",
      "		});",
      "",
      "		it('should also pass', done => {",
      "			expect(true).toBe(true);",
      "			done();",
      "		});",
      "",
      "	});",
      "",
      "});",
      ""
    ]
  }
}